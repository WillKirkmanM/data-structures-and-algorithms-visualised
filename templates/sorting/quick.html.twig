{% extends 'base.html.twig' %}

{% block title %}Quick Sort Algorithm{% endblock %}

{% block body %}
<div class="container">
    <div class="algorithm-header">
        <h1>Quick Sort Algorithm</h1>
        <div class="complexity-badges">
            <span class="badge">Time: O(n log n)</span>
            <span class="badge">Average Case: O(n log n)</span>
            <span class="badge">Worst Case: O(nÂ²)</span>
            <span class="badge">Space: O(log n)</span>
            <span class="badge">Stable: No</span>
        </div>
    </div>

    <div class="algorithm-description">
        <h2>Description</h2>
        <p>Quick Sort is a highly efficient, comparison-based algorithm that uses a divide-and-conquer strategy. It works by selecting a 'pivot' element and partitioning the array around it, such that smaller elements go to the left and larger elements go to the right.</p>
    </div>

    <div class="visualization-container">
        <h2>Live Visualization</h2>
        <div id="array-container"></div>
        <div class="controls">
            <button id="startBtn" class="btn primary">Start Sort</button>
            <button id="resetBtn" class="btn secondary">Reset Array</button>
            <div class="speed-control">
                <label for="speed">Speed:</label>
                <input type="range" id="speed" min="1" max="100" value="50">
            </div>
        </div>
    </div>

    <div class="implementation-examples">
        <h2>Implementation Examples</h2>
        
        <div class="code-tabs">
            <button class="tab-btn active" onclick="showCode('js')">JavaScript</button>
            <button class="tab-btn" onclick="showCode('python')">Python</button>
            <button class="tab-btn" onclick="showCode('rust')">Rust</button>
        </div>

        <div id="js-code" class="code-block active">
            <pre><code>
function quickSort(arr, low = 0, high = arr.length - 1) {
    if (low < high) {
        const pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
    return arr;
}

function partition(arr, low, high) {
    const pivot = arr[high];
    let i = low - 1;
    
    for (let j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            [arr[i], arr[j]] = [arr[j], arr[i]];
        }
    }
    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];
    return i + 1;
}
            </code></pre>
        </div>

        <div id="python-code" class="code-block">
            <pre><code>
def quick_sort(arr, low=0, high=None):
    if high is None:
        high = len(arr) - 1
    if low < high:
        pivot_index = partition(arr, low, high)
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)
    return arr

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1
            </code></pre>
        </div>

        <div id="rust-code" class="code-block">
            <pre><code>
fn quick_sort<T: Ord>(arr: &mut [T]) {
    let len = arr.len();
    if len <= 1 {
        return;
    }
    
    let pivot = partition(arr);
    quick_sort(&mut arr[..pivot]);
    quick_sort(&mut arr[pivot + 1..]);
}

fn partition<T: Ord>(arr: &mut [T]) -> usize {
    let len = arr.len();
    let pivot = len - 1;
    let mut i = 0;
    
    for j in 0..len - 1 {
        if arr[j] <= arr[pivot] {
            arr.swap(i, j);
            i += 1;
        }
    }
    
    arr.swap(i, pivot);
    i
}
            </code></pre>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script type="module">
    const arrayContainer = document.getElementById('array-container');
    let numbers = [];
    
    function generateArray() {
        numbers = Array.from({length: 20}, () => Math.floor(Math.random() * 100));
        visualizeArray();
    }

    function visualizeArray() {
        arrayContainer.innerHTML = '';
        numbers.forEach(num => {
            const bar = document.createElement('div');
            bar.className = 'bar';
            bar.style.height = `${num * 3}px`;
            bar.setAttribute('data-value', num);
            arrayContainer.appendChild(bar);
        });
    }

    async function partition(low, high) {
        const pivot = numbers[high];
        const bars = document.querySelectorAll('.bar');
        
        bars[high].style.backgroundColor = '#ff6b6b';
        
        let i = low - 1;
        
        for (let j = low; j < high; j++) {
            bars[j].style.backgroundColor = '#ff0000';
            await new Promise(resolve => setTimeout(resolve, getDelay()));
            
            if (numbers[j] <= pivot) {
                i++;
                [numbers[i], numbers[j]] = [numbers[j], numbers[i]];
                visualizeArray();
                bars[i].style.backgroundColor = '#ffd93d';
            } else {
                bars[j].style.backgroundColor = '#3498db';
            }
        }
        
        [numbers[i + 1], numbers[high]] = [numbers[high], numbers[i + 1]];
        visualizeArray();
        
        for (let k = low; k <= high; k++) {
            if (k === i + 1) {
                bars[k].style.backgroundColor = '#2ecc71';
            }
        }
        
        return i + 1;
    }

    async function quickSort(low = 0, high = numbers.length - 1) {
        if (low < high) {
            const pivotIndex = await partition(low, high);
            await quickSort(low, pivotIndex - 1);
            await quickSort(pivotIndex + 1, high);
        }
        
        if (low === 0 && high === numbers.length - 1) {
            const bars = document.querySelectorAll('.bar');
            bars.forEach(bar => bar.style.backgroundColor = '#2ecc71');
        }
    }

    function showCode(language) {
        document.querySelectorAll('.code-block').forEach(block => block.classList.remove('active'));
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`${language}-code`).classList.add('active');
        document.querySelector(`[onclick="showCode('${language}')"]`).classList.add('active');
    }

    const speedControl = document.getElementById('speed');
    const getDelay = () => 200 - (speedControl.value * 2);

    document.getElementById('startBtn').addEventListener('click', () => quickSort());
    document.getElementById('resetBtn').addEventListener('click', generateArray);
    
    window.showCode = showCode;
    generateArray();
</script>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    :root {
        --font-primary: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
            "Segoe UI Emoji", "Segoe UI Symbol";
    }

    body {
        font-family: var(--font-primary);
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    h1, h2 {
        font-family: var(--font-primary);
        font-weight: 600;
        line-height: 1.2;
    }

    code, pre {
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .algorithm-header {
        margin-bottom: 2rem;
    }

    .complexity-badges {
        margin-top: 1rem;
    }

    .badge {
        background-color: #2c3e50;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        margin-right: 1rem;
        font-size: 0.9rem;
    }

    .visualization-container {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin: 2rem 0;
    }

    #array-container {
        height: 400px;
        display: flex;
        align-items: flex-end;
        gap: 2px;
        margin: 2rem 0;
        background-color: white;
        padding: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .bar {
        flex: 1;
        background-color: #3498db;
        transition: height 0.1s ease;
        border-radius: 2px 2px 0 0;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
    }

    .primary {
        background-color: #2ecc71;
        color: white;
    }

    .secondary {
        background-color: #e74c3c;
        color: white;
    }

    .implementation-examples {
        margin-top: 3rem;
    }

    .code-tabs {
        margin-bottom: 1rem;
    }

    .tab-btn {
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 2px solid transparent;
    }

    .tab-btn.active {
        border-bottom-color: #3498db;
        color: #3498db;
    }

    .code-block {
        display: none;
        background-color: #2c3e50;
        padding: 1rem;
        border-radius: 4px;
    }

    .code-block.active {
        display: block;
    }

    .code-block pre {
        margin: 0;
        color: #ecf0f1;
    }

    .speed-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>
{% endblock %}