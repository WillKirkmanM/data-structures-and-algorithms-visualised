{% extends 'base.html.twig' %}

{% block title %}Counting Sort Algorithm{% endblock %}

{% block body %}
<div class="container">
    <div class="algorithm-header">
        <h1>Counting Sort Algorithm</h1>
        <div class="complexity-badges">
            <span class="badge">Time: O(n + k)</span>
            <span class="badge">Space: O(k)</span>
            <span class="badge">Stable: Yes</span>
            <span class="badge">Non-Comparative: Yes</span>
        </div>
    </div>

    <div class="algorithm-description">
        <h2>Description</h2>
        <p>Counting Sort is a non-comparative sorting algorithm that works by counting the number of objects having distinct key values. It works best when the range of input values (k) is not significantly larger than the number of objects to be sorted (n).</p>
    </div>

    <div class="visualization-container">
        <h2>Live Visualization</h2>
        <div id="array-container"></div>
        <div id="count-array-container">
            <h3>Count Array</h3>
            <div id="count-bars"></div>
        </div>
        <div class="controls">
            <button id="startBtn" class="btn primary">Start Sort</button>
            <button id="resetBtn" class="btn secondary">Reset Array</button>
            <div class="speed-control">
                <label for="speed">Speed:</label>
                <input type="range" id="speed" min="1" max="100" value="50">
            </div>
        </div>
    </div>

    <div class="implementation-examples">
        <h2>Implementation Examples</h2>
        
        <div class="code-tabs">
            <button class="tab-btn active" onclick="showCode('js')">JavaScript</button>
            <button class="tab-btn" onclick="showCode('python')">Python</button>
            <button class="tab-btn" onclick="showCode('rust')">Rust</button>
        </div>

        <div id="js-code" class="code-block active">
            <pre><code>
function countingSort(arr) {
    const max = Math.max(...arr);
    const count = new Array(max + 1).fill(0);
    const output = new Array(arr.length);

    // Store count of each element
    for (let i = 0; i < arr.length; i++) {
        count[arr[i]]++;
    }

    // Modify count array to store actual positions
    for (let i = 1; i <= max; i++) {
        count[i] += count[i - 1];
    }

    // Build output array
    for (let i = arr.length - 1; i >= 0; i--) {
        output[count[arr[i]] - 1] = arr[i];
        count[arr[i]]--;
    }

    return output;
}
            </code></pre>
        </div>

        <div id="python-code" class="code-block">
            <pre><code>
def counting_sort(arr):
    max_val = max(arr)
    count = [0] * (max_val + 1)
    output = [0] * len(arr)

    # Store count of each element
    for i in arr:
        count[i] += 1

    # Modify count array to store actual positions
    for i in range(1, max_val + 1):
        count[i] += count[i - 1]

    # Build output array
    for i in range(len(arr) - 1, -1, -1):
        output[count[arr[i]] - 1] = arr[i]
        count[arr[i]] -= 1

    return output
            </code></pre>
        </div>

        <div id="rust-code" class="code-block">
            <pre><code>
fn counting_sort(arr: &mut [usize]) {
    if arr.is_empty() {
        return;
    }

    let max = *arr.iter().max().unwrap();
    let mut count = vec![0; max + 1];
    let mut output = vec![0; arr.len()];

    // Store count of each element
    for &value in arr.iter() {
        count[value] += 1;
    }

    // Modify count array to store actual positions
    for i in 1..=max {
        count[i] += count[i - 1];
    }

    // Build output array
    for &value in arr.iter().rev() {
        output[count[value] - 1] = value;
        count[value] -= 1;
    }

    arr.copy_from_slice(&output);
}
            </code></pre>
        </div>
    </div>
</div>

<style>
    :root {
        --font-primary: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
            "Segoe UI Emoji", "Segoe UI Symbol";
    }

    body {
        font-family: var(--font-primary);
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    h1, h2 {
        font-family: var(--font-primary);
        font-weight: 600;
        line-height: 1.2;
    }

    code, pre {
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .algorithm-header {
        margin-bottom: 2rem;
    }

    .complexity-badges {
        margin-top: 1rem;
    }

    .badge {
        background-color: #2c3e50;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        margin-right: 1rem;
        font-size: 0.9rem;
    }

    .visualization-container {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin: 2rem 0;
    }

    #array-container {
        height: 400px;
        display: flex;
        align-items: flex-end;
        gap: 2px;
        margin: 2rem 0;
        background-color: white;
        padding: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .bar {
        flex: 1;
        background-color: #3498db;
        transition: height 0.1s ease;
        border-radius: 2px 2px 0 0;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
    }

    .primary {
        background-color: #2ecc71;
        color: white;
    }

    .secondary {
        background-color: #e74c3c;
        color: white;
    }

    .implementation-examples {
        margin-top: 3rem;
    }

    .code-tabs {
        margin-bottom: 1rem;
    }

    .tab-btn {
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 2px solid transparent;
    }

    .tab-btn.active {
        border-bottom-color: #3498db;
        color: #3498db;
    }

    .code-block {
        display: none;
        background-color: #2c3e50;
        padding: 1rem;
        border-radius: 4px;
    }

    .code-block.active {
        display: block;
    }

    .code-block pre {
        margin: 0;
        color: #ecf0f1;
    }

    .speed-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script type="module">
    const arrayContainer = document.getElementById('array-container');
    const countContainer = document.getElementById('count-bars');
    let numbers = [];
    let countArray = [];
    
    function generateArray() {
        numbers = Array.from({length: 20}, () => Math.floor(Math.random() * 50));
        countArray = new Array(Math.max(...numbers) + 1).fill(0);
        visualizeArray();
        visualizeCountArray();
    }

    function visualizeArray() {
        arrayContainer.innerHTML = '';
        numbers.forEach(num => {
            const bar = document.createElement('div');
            bar.className = 'bar';
            bar.style.height = `${num * 3}px`;
            bar.setAttribute('data-value', num);
            arrayContainer.appendChild(bar);
        });
    }

    function visualizeCountArray() {
        countContainer.innerHTML = '';
        countArray.forEach((count, index) => {
            const countBar = document.createElement('div');
            countBar.className = 'count-bar';
            countBar.style.height = `${count * 10}px`;
            countBar.setAttribute('data-value', `${index}:${count}`);
            countContainer.appendChild(countBar);
        });
    }

    async function countingSort() {
        const bars = document.querySelectorAll('.bar');
        const max = Math.max(...numbers);
        const output = new Array(numbers.length);
        countArray = new Array(max + 1).fill(0);

        for (let i = 0; i < numbers.length; i++) {
            bars[i].style.backgroundColor = '#ff0000';
            countArray[numbers[i]]++;
            visualizeCountArray();
            await new Promise(resolve => setTimeout(resolve, getDelay()));
            bars[i].style.backgroundColor = '#3498db';
        }

        for (let i = 1; i <= max; i++) {
            countArray[i] += countArray[i - 1];
            visualizeCountArray();
            await new Promise(resolve => setTimeout(resolve, getDelay()));
        }

        for (let i = numbers.length - 1; i >= 0; i--) {
            bars[i].style.backgroundColor = '#ff6b6b';
            output[countArray[numbers[i]] - 1] = numbers[i];
            countArray[numbers[i]]--;
            
            numbers = [...output.slice(0, countArray[numbers[i]] + 1), ...numbers.slice(countArray[numbers[i]] + 1)];
            visualizeArray();
            visualizeCountArray();
            
            const sortedBars = document.querySelectorAll('.bar');
            sortedBars[countArray[numbers[i]]].style.backgroundColor = '#2ecc71';
            
            await new Promise(resolve => setTimeout(resolve, getDelay()));
        }

        document.querySelectorAll('.bar').forEach(bar => {
            bar.style.backgroundColor = '#2ecc71';
        });
    }

    function showCode(language) {
        document.querySelectorAll('.code-block').forEach(block => block.classList.remove('active'));
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`${language}-code`).classList.add('active');
        document.querySelector(`[onclick="showCode('${language}')"]`).classList.add('active');
    }

    const speedControl = document.getElementById('speed');
    const getDelay = () => 200 - (speedControl.value * 2);

    document.getElementById('startBtn').addEventListener('click', countingSort);
    document.getElementById('resetBtn').addEventListener('click', generateArray);
    
    window.showCode = showCode;
    generateArray();
</script>
{% endblock %}
