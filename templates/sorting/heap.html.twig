{% extends 'base.html.twig' %}

{% block title %}Heap Sort Algorithm{% endblock %}

{% block body %}
<div class="container">
    <div class="algorithm-header">
        <h1>Heap Sort Algorithm</h1>
        <div class="complexity-badges">
            <span class="badge">Time: O(n log n)</span>
            <span class="badge">Space: O(1)</span>
            <span class="badge">Stable: No</span>
        </div>
    </div>

    <div class="algorithm-description">
        <h2>Description</h2>
        <p>Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure. It divides the input into a sorted and an unsorted region, and iteratively shrinks the unsorted region by extracting the largest element and moving it to the sorted region.</p>
    </div>

    <div class="visualization-container">
        <h2>Live Visualization</h2>
        <div id="array-container"></div>
        <div class="controls">
            <button id="startBtn" class="btn primary">Start Sort</button>
            <button id="resetBtn" class="btn secondary">Reset Array</button>
            <div class="speed-control">
                <label for="speed">Speed:</label>
                <input type="range" id="speed" min="1" max="100" value="50">
            </div>
        </div>
    </div>

    <div class="implementation-examples">
        <h2>Implementation Examples</h2>
        
        <div class="code-tabs">
            <button class="tab-btn active" onclick="showCode('js')">JavaScript</button>
            <button class="tab-btn" onclick="showCode('python')">Python</button>
            <button class="tab-btn" onclick="showCode('rust')">Rust</button>
        </div>

        <div id="js-code" class="code-block active">
            <pre><code>
function heapSort(arr) {
    const n = arr.length;

    // Build max heap
    for (let i = Math.floor(n / 2) - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extract elements from heap one by one
    for (let i = n - 1; i > 0; i--) {
        [arr[0], arr[i]] = [arr[i], arr[0]];
        heapify(arr, i, 0);
    }
    return arr;
}

function heapify(arr, n, i) {
    let largest = i;
    const left = 2 * i + 1;
    const right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest !== i) {
        [arr[i], arr[largest]] = [arr[largest], arr[i]];
        heapify(arr, n, largest);
    }
}
            </code></pre>
        </div>

        <div id="python-code" class="code-block">
            <pre><code>
def heap_sort(arr):
    n = len(arr)

    # Build max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Extract elements
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr

def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left

    if right < n and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)
            </code></pre>
        </div>

        <div id="rust-code" class="code-block">
            <pre><code>
fn heap_sort<T: Ord>(arr: &mut [T]) {
    let n = arr.len();

    // Build max heap
    for i in (0..n/2).rev() {
        heapify(arr, n, i);
    }

    // Extract elements
    for i in (1..n).rev() {
        arr.swap(0, i);
        heapify(&mut arr[..i], i, 0);
    }
}

fn heapify<T: Ord>(arr: &mut [T], n: usize, i: usize) {
    let mut largest = i;
    let left = 2 * i + 1;
    let right = 2 * i + 2;

    if left < n && arr[left] > arr[largest] {
        largest = left;
    }

    if right < n && arr[right] > arr[largest] {
        largest = right;
    }

    if largest != i {
        arr.swap(i, largest);
        heapify(arr, n, largest);
    }
}
            </code></pre>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script type="module">
    const arrayContainer = document.getElementById('array-container');
    let numbers = [];
    
    function generateArray() {
        numbers = Array.from({length: 20}, () => Math.floor(Math.random() * 100));
        visualizeArray();
    }

    function visualizeArray() {
        arrayContainer.innerHTML = '';
        numbers.forEach(num => {
            const bar = document.createElement('div');
            bar.className = 'bar';
            bar.style.height = `${num * 3}px`;
            bar.setAttribute('data-value', num);
            arrayContainer.appendChild(bar);
        });
    }

    async function heapify(n, i) {
        const bars = document.querySelectorAll('.bar');
        let largest = i;
        const left = 2 * i + 1;
        const right = 2 * i + 2;

        bars[i].style.backgroundColor = '#ff6b6b';
        await new Promise(resolve => setTimeout(resolve, getDelay()));

        if (left < n) {
            bars[left].style.backgroundColor = '#ffd93d';
            if (numbers[left] > numbers[largest]) {
                if (largest !== i) bars[largest].style.backgroundColor = '#3498db';
                largest = left;
            }
        }

        if (right < n) {
            bars[right].style.backgroundColor = '#ffd93d';
            if (numbers[right] > numbers[largest]) {
                if (largest !== i) bars[largest].style.backgroundColor = '#3498db';
                largest = right;
            }
        }

        if (largest !== i) {
            [numbers[i], numbers[largest]] = [numbers[largest], numbers[i]];
            visualizeArray();
            await heapify(n, largest);
        }

        if (i < n) bars[i].style.backgroundColor = '#3498db';
        if (left < n) bars[left].style.backgroundColor = '#3498db';
        if (right < n) bars[right].style.backgroundColor = '#3498db';
    }

    async function heapSort() {
        const n = numbers.length;
        const bars = document.querySelectorAll('.bar');

        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
            await heapify(n, i);
        }

        for (let i = n - 1; i > 0; i--) {
            [numbers[0], numbers[i]] = [numbers[i], numbers[0]];
            visualizeArray();
            bars[i].style.backgroundColor = '#2ecc71';
            await heapify(i, 0);
        }

        bars[0].style.backgroundColor = '#2ecc71';
    }

    function showCode(language) {
        document.querySelectorAll('.code-block').forEach(block => block.classList.remove('active'));
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`${language}-code`).classList.add('active');
        document.querySelector(`[onclick="showCode('${language}')"]`).classList.add('active');
    }

    const speedControl = document.getElementById('speed');
    const getDelay = () => 200 - (speedControl.value * 2);

    document.getElementById('startBtn').addEventListener('click', heapSort);
    document.getElementById('resetBtn').addEventListener('click', generateArray);
    
    window.showCode = showCode;
    generateArray();
</script>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    :root {
        --font-primary: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
            "Segoe UI Emoji", "Segoe UI Symbol";
    }

    body {
        font-family: var(--font-primary);
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    h1, h2 {
        font-family: var(--font-primary);
        font-weight: 600;
        line-height: 1.2;
    }

    code, pre {
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .algorithm-header {
        margin-bottom: 2rem;
    }

    .complexity-badges {
        margin-top: 1rem;
    }

    .badge {
        background-color: #2c3e50;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        margin-right: 1rem;
        font-size: 0.9rem;
    }

    .visualization-container {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin: 2rem 0;
    }

    #array-container {
        height: 400px;
        display: flex;
        align-items: flex-end;
        gap: 2px;
        margin: 2rem 0;
        background-color: white;
        padding: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .bar {
        flex: 1;
        background-color: #3498db;
        transition: height 0.1s ease;
        border-radius: 2px 2px 0 0;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
    }

    .primary {
        background-color: #2ecc71;
        color: white;
    }

    .secondary {
        background-color: #e74c3c;
        color: white;
    }

    .implementation-examples {
        margin-top: 3rem;
    }

    .code-tabs {
        margin-bottom: 1rem;
    }

    .tab-btn {
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 2px solid transparent;
    }

    .tab-btn.active {
        border-bottom-color: #3498db;
        color: #3498db;
    }

    .code-block {
        display: none;
        background-color: #2c3e50;
        padding: 1rem;
        border-radius: 4px;
    }

    .code-block.active {
        display: block;
    }

    .code-block pre {
        margin: 0;
        color: #ecf0f1;
    }

    .speed-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>
{% endblock %}