{% extends 'base.html.twig' %}

{% block title %}Merge Sort Algorithm{% endblock %}

{% block body %}
<div class="container">
    <div class="algorithm-header">
        <h1>Merge Sort Algorithm</h1>
        <div class="complexity-badges">
            <span class="badge">Time: O(n log n)</span>
            <span class="badge">Space: O(n)</span>
            <span class="badge">Stable: Yes</span>
        </div>
    </div>

    <div class="algorithm-description">
        <h2>Description</h2>
        <p>Merge Sort is a divide-and-conquer algorithm that recursively breaks down a problem into smaller, more manageable subproblems until they become simple enough to solve directly. The solutions to the subproblems are then combined to solve the original problem.</p>
    </div>

    <div class="visualization-container">
        <h2>Live Visualization</h2>
        <div id="array-container"></div>
        <div class="controls">
            <button id="startBtn" class="btn primary">Start Sort</button>
            <button id="resetBtn" class="btn secondary">Reset Array</button>
            <div class="speed-control">
                <label for="speed">Speed:</label>
                <input type="range" id="speed" min="1" max="100" value="50">
            </div>
        </div>
    </div>

    <div class="implementation-examples">
        <h2>Implementation Examples</h2>
        
        <div class="code-tabs">
            <button class="tab-btn active" onclick="showCode('js')">JavaScript</button>
            <button class="tab-btn" onclick="showCode('python')">Python</button>
            <button class="tab-btn" onclick="showCode('rust')">Rust</button>
        </div>

        <div id="js-code" class="code-block active">
            <pre><code>
function mergeSort(arr) {
    if (arr.length <= 1) return arr;
    
    const mid = Math.floor(arr.length / 2);
    const left = arr.slice(0, mid);
    const right = arr.slice(mid);
    
    return merge(
        mergeSort(left),
        mergeSort(right)
    );
}

function merge(left, right) {
    let result = [];
    let i = 0, j = 0;
    
    while (i < left.length && j < right.length) {
        if (left[i] <= right[j]) {
            result.push(left[i++]);
        } else {
            result.push(right[j++]);
        }
    }
    
    return result.concat(left.slice(i)).concat(right.slice(j));
}
            </code></pre>
        </div>

        <div id="python-code" class="code-block">
            <pre><code>
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
        
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            
    result.extend(left[i:])
    result.extend(right[j:])
    return result
            </code></pre>
        </div>

        <div id="rust-code" class="code-block">
            <pre><code>
fn merge_sort<T: Ord + Copy>(arr: &mut [T]) {
    if arr.len() <= 1 {
        return;
    }
    
    let mid = arr.len() / 2;
    merge_sort(&mut arr[..mid]);
    merge_sort(&mut arr[mid..]);
    
    let mut temp = arr.to_vec();
    merge(&arr[..mid], &arr[mid..], &mut temp);
    arr.copy_from_slice(&temp);
}

fn merge<T: Ord + Copy>(left: &[T], right: &[T], result: &mut [T]) {
    let mut i = 0;
    let mut j = 0;
    let mut k = 0;
    
    while i < left.len() && j < right.len() {
        if left[i] <= right[j]) {
            result[k] = left[i];
            i += 1;
        } else {
            result[k] = right[j];
            j += 1;
        }
        k += 1;
    }
    
    result[k..].copy_from_slice(&left[i..]);
    result[k + left.len() - i..].copy_from_slice(&right[j..]);
}
            </code></pre>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script type="module">
    const arrayContainer = document.getElementById('array-container');
    let numbers = [];
    let auxiliaryArray = [];
    
    function generateArray() {
        numbers = Array.from({length: 20}, () => Math.floor(Math.random() * 100));
        auxiliaryArray = [...numbers];
        visualizeArray();
    }

    function visualizeArray() {
        arrayContainer.innerHTML = '';
        numbers.forEach((num, idx) => {
            const bar = document.createElement('div');
            bar.className = 'bar';
            bar.style.height = `${num * 3}px`;
            bar.setAttribute('data-value', num);
            arrayContainer.appendChild(bar);
        });
    }

    async function merge(start, mid, end) {
        const bars = document.querySelectorAll('.bar');
        
        for (let i = start; i <= end; i++) {
            auxiliaryArray[i] = numbers[i];
        }

        let k = start;
        let i = start;
        let j = mid + 1;

        while (i <= mid && j <= end) {
            bars[i].style.backgroundColor = '#ff0000';
            bars[j].style.backgroundColor = '#ff0000';
            await new Promise(resolve => setTimeout(resolve, getDelay()));

            if (auxiliaryArray[i] <= auxiliaryArray[j]) {
                numbers[k] = auxiliaryArray[i];
                bars[k].style.backgroundColor = '#2ecc71';
                i++;
            } else {
                numbers[k] = auxiliaryArray[j];
                bars[k].style.backgroundColor = '#2ecc71';
                j++;
            }
            visualizeArray();
            k++;
            await new Promise(resolve => setTimeout(resolve, getDelay()));
        }

        while (i <= mid) {
            bars[i].style.backgroundColor = '#ff0000';
            await new Promise(resolve => setTimeout(resolve, getDelay()));
            numbers[k] = auxiliaryArray[i];
            visualizeArray();
            bars[k].style.backgroundColor = '#2ecc71';
            i++;
            k++;
        }

        while (j <= end) {
            bars[j].style.backgroundColor = '#ff0000';
            await new Promise(resolve => setTimeout(resolve, getDelay()));
            numbers[k] = auxiliaryArray[j];
            visualizeArray();
            bars[k].style.backgroundColor = '#2ecc71';
            j++;
            k++;
        }

        for (let idx = start; idx <= end; idx++) {
            bars[idx].style.backgroundColor = '#2ecc71';
        }
    }

    async function mergeSort(start = 0, end = numbers.length - 1) {
        if (start < end) {
            const mid = Math.floor((start + end) / 2);
            
            const bars = document.querySelectorAll('.bar');
            for (let i = start; i <= end; i++) {
                bars[i].style.backgroundColor = '#3498db';
            }
            await new Promise(resolve => setTimeout(resolve, getDelay()));
            
            await mergeSort(start, mid);
            await mergeSort(mid + 1, end);
            
            await merge(start, mid, end);
        }
    }

    function showCode(language) {
        document.querySelectorAll('.code-block').forEach(block => block.classList.remove('active'));
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById(`${language}-code`).classList.add('active');
        document.querySelector(`[onclick="showCode('${language}')"]`).classList.add('active');
    }

    const speedControl = document.getElementById('speed');
    const getDelay = () => 200 - (speedControl.value * 2);

    document.getElementById('startBtn').addEventListener('click', mergeSort);
    document.getElementById('resetBtn').addEventListener('click', generateArray);
    
    window.showCode = showCode;
    generateArray();
</script>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    :root {
        --font-primary: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji",
            "Segoe UI Emoji", "Segoe UI Symbol";
    }

    body {
        font-family: var(--font-primary);
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    h1, h2 {
        font-family: var(--font-primary);
        font-weight: 600;
        line-height: 1.2;
    }

    code, pre {
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .algorithm-header {
        margin-bottom: 2rem;
    }

    .complexity-badges {
        margin-top: 1rem;
    }

    .badge {
        background-color: #2c3e50;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        margin-right: 1rem;
        font-size: 0.9rem;
    }

    .visualization-container {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin: 2rem 0;
    }

    #array-container {
        height: 400px;
        display: flex;
        align-items: flex-end;
        gap: 2px;
        margin: 2rem 0;
        background-color: white;
        padding: 1rem;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .bar {
        flex: 1;
        background-color: #3498db;
        transition: height 0.1s ease;
        border-radius: 2px 2px 0 0;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
    }

    .primary {
        background-color: #2ecc71;
        color: white;
    }

    .secondary {
        background-color: #e74c3c;
        color: white;
    }

    .implementation-examples {
        margin-top: 3rem;
    }

    .code-tabs {
        margin-bottom: 1rem;
    }

    .tab-btn {
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 2px solid transparent;
    }

    .tab-btn.active {
        border-bottom-color: #3498db;
        color: #3498db;
    }

    .code-block {
        display: none;
        background-color: #2c3e50;
        padding: 1rem;
        border-radius: 4px;
    }

    .code-block.active {
        display: block;
    }

    .code-block pre {
        margin: 0;
        color: #ecf0f1;
    }

    .speed-control {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>
{% endblock %}